apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
def depend = rootProject.ext.dependencies
def buildDateTime = project.hasProperty('devBuild') ? rootProject.ext.android.versionCode : (new Date().format('yyMMdd') + rootProject.ext.android.versionCode).toInteger()
def initVersionName = rootProject.ext.android.versionName

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
        arg("AROUTER_GENERATE_DOC", "enable")
    }
}

android {
    publishNonDefault true
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            jniLibs.srcDirs = ['libs']
        }
    }
    // 开发模式禁用png优化
    if (project.hasProperty('devBuild')) {
        aaptOptions.cruncherEnabled = false
    }
    // 用于支持 23以上(6.0)不支持HttpClient的问题
    useLibrary 'org.apache.http.legacy'
    //图片后缀跟名称后缀不一样
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    compileSdkVersion rootProject.ext.android.compileSdkVersion


    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode buildDateTime

        //修改版本名称，切记还要修改tinkerId
        versionName initVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            // 是否进行混淆
            minifyEnabled true
            zipAlignEnabled true

            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {

            // 是否进行混淆
            minifyEnabled true
            zipAlignEnabled true// 移除无用的resource文件

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // 移除lint检查的error
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'RestrictedApi'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
            jni.srcDirs = []
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude '.readme'
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }
}

repositories {
    flatDir {
        dirs '../common/libs', 'libs'
    }
}
dependencies {
    implementation depend.kotlin
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation depend.support
    implementation depend.arouterapi
    kapt depend.aroutercompiler
}